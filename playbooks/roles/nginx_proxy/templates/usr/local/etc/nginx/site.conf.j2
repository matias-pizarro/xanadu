# let final destination terminate ssl, both for ipv4 and 6
# redirect let's encrypt traffic to letsencrypt jail
# redirect all remaining http traffic to https
# let final destination decide about hsts
upstream {{ hostvars[item].jail_name }}_backend {
{% if hostvars[item].jail_host == jail_host %}
{% if hostvars[item].server_socket == 'unix' %}
    server       unix:/var/run/nginx/{{ hostvars[item].jail_name }}/nginx.sock;
{% else %}
    server       {{ hostvars[item].ipv4.address }};
{% endif %}
{% else %}
    {{ hostvars[item].hostname }}
{% endif %}
    keepalive 60;
}

server {
    listen       localhost:80;
    server_name  {{ hostvars[item].server_name }};

    location / {
        return 301 https://$host$request_uri;
    }

    location '/.well-known/acme-challenge' {
         proxy_set_header   X-Real-IP $remote_addr;
         proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header   Host $http_host;
         proxy_set_header   X-NginX-Proxy true;
         proxy_pass         http://letsencrypt_backend;
         proxy_http_version 1.1;
         proxy_set_header   Connection "";
    }
}

server {
    listen       localhost:443 ssl;
    server_name  {{ hostvars[item].server_name }};

    location / {
         proxy_set_header   X-Real-IP $remote_addr;
         proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header   Host $http_host;
         proxy_set_header   X-NginX-Proxy true;
         proxy_pass         https://{{ hostvars[item].jail_name }}_backend;
         proxy_http_version 1.1;
         proxy_set_header   Connection "";
    }
}
